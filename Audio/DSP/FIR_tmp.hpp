
float FilterLastInputImpl(
        const float *input, const float *lastInput,
        const float *window, const std::size_t processSize,
        const std::size_t zeroPad, const std::size_t zeroPadLastInput) noexcept
{
    float sample { 0.0 };

    auto cptA = 0u;
    auto cptB = 0u;

    for (auto i = zeroPad; i < processSize; ++i) {
        const auto idx = processSize - i - 1;
        // std::cout << " -(inIdx: " << idx << " winIdx: " << idx + zeroPad << ")" << std::endl;
        sample += (input[idx] * window[idx + zeroPad]);
        cptA++;
    }
    // std::cout << "___LastInFrom: " << lastInput + zeroPad << ", To: " << lastInput << " == " << zeroPad << std::endl;
    for (auto i = 0; i < zeroPad; ++i) {
        const auto idx = processSize - i - 1;
        // std::cout << " --(inIdx: " << idx - 1 << " winIdx: " << zeroPad - i - 1 << ")" << std::endl;
        // sample += (lastInput[i] * window[zeroPad - i - 1]);
        sample += (lastInput[idx] * window[zeroPad - i - 1]);
        cptB++;
    }

    assert(cptA == (processSize - zeroPad));
    assert(cptB == zeroPad);
    assert((cptA + cptB) == processSize);
    // std::cout << std::endl;
    return sample;
}

float FilterImpl(
        const float *input,
        const float *window, const std::size_t processSize,
        const std::size_t zeroPad) noexcept
{
    float sample { 0.0 };

    for (auto i = zeroPad; i < processSize; ++i) {
        const auto idx = processSize - i - 1;
        // std::cout << " (inIdx: " << idx << " winIdx: " << idx + zeroPad << ")" << std::endl;
        sample += (input[idx] * window[idx + zeroPad]);
        // sample += (input[i] * window[i]);
        // std::cout << input[i] << std::endl;
    }
    // std::cout << std::endl;
    return sample;
}

template<bool RemoveDelay = true, bool ProcessFirstChunk = true>
void FilterLastInput(
        const Audio::DSP::FilterSpecs specs,
        const float *input, float *output,
        const std::size_t inputSize,
        const float *lastInput, const std::size_t lastInputSize)
{
    const auto windowSize = specs.windowSize;
    std::vector<float> windowFilter(windowSize);
    Audio::DSP::WindowMaker::GenerateFilterCoefficients(specs.windowType, windowSize, windowFilter.data());
    Audio::DSP::FIR::DesignFilter(specs, windowFilter.data(), windowSize);


    std::cout << "input: " << input << std::endl;
    std::cout << "input size: " << inputSize << std::endl;
    std::cout << "last input: " << lastInput << std::endl;
    std::cout << "last input size: " << lastInputSize << std::endl;

    auto cpt = 0u;
    if constexpr (RemoveDelay) {
        // Highest part of the input
        for (auto i = 0u; i < inputSize - windowSize / 2 + 1; ++i) {
            const auto idx = inputSize - i - 1u;
            output[idx] = FilterImpl(input + idx - windowSize / 2, windowFilter.data(), windowSize, 0u);
            cpt++;
        }
        // Lower part of the input
        if constexpr (ProcessFirstChunk) {
            const auto lastInputOffset = (lastInputSize < windowSize) ? 0u : (lastInputSize - (windowSize - 1) - 1);
            for (auto i = inputSize - windowSize + 1; i < inputSize - windowSize / 2; ++i) {
                const auto idx = inputSize - i - 1u;
                output[idx - windowSize / 2] = FilterLastInputImpl(input, lastInput + lastInputOffset, windowFilter.data(), windowSize, windowSize - 1 - idx, lastInputSize - lastInputOffset);
                // output[idx - windowSize / 2] = FilterImpl(input, windowFilter.data(), windowSize, windowSize - 1 - idx);
                cpt++;
            }
        }
    } else {
        // Hihest part of the input
        for (auto i = 0u; i < inputSize - windowSize + 1; ++i) {
            const auto idx = inputSize - i - 1u;
            // std::cout << "i: " << i << ", idx: " << idx << ", zeroPad: " << 0 << ", inOffset" << (idx - windowSize + 1) << std::endl;
            output[idx] = FilterImpl(input + idx - windowSize, windowFilter.data(), windowSize, 0u);
            cpt++;
        }
        // Lower part of the input
        if constexpr (ProcessFirstChunk) {
            const auto lastInputOffset = (lastInputSize < windowSize) ? 0u : (lastInputSize - (windowSize - 1));
            for (auto i = inputSize - windowSize + 1; i < inputSize; ++i) {
                const auto idx = inputSize - i - 1u;
                output[idx] = FilterLastInputImpl(input, lastInput, windowFilter.data(), windowSize, windowSize - 1 - idx, lastInputSize - lastInputOffset);
                // output[idx] = FilterImpl(input, windowFilter.data(), windowSize, windowSize - 1 - idx);
                cpt++;
            }
        }
    }

    // Normalize output
    // std::for_each(output, output + inputSize, [](float &value){
        // value /= std::sqrt(2.0);
    // });
}

template<bool RemoveDelay = true, bool ProcessFirstChunk = true>
void Filter(
        const Audio::DSP::FilterSpecs specs,
        const float *input, float *output,
        const std::size_t inputSize)
{
    /** @todo Check if inputSize < windowSize ! */
    const auto windowSize = specs.windowSize;
    std::vector<float> windowFilter(windowSize);
    Audio::DSP::WindowMaker::GenerateFilterCoefficients(specs.windowType, windowSize, windowFilter.data());
    Audio::DSP::FIR::DesignFilter(specs, windowFilter.data(), windowSize);

    std::cout << "input: " << input << std::endl;
    std::cout << "input size: " << inputSize << std::endl;
    std::cout << "window size: " << windowSize << std::endl;
    // const float coefs [431] = {
    //     0.0105768366297881, 0.014133226977382235, 0.01881847728633389, 0.0201346660114865, 0.01671297155848559, 0.008724344055447954, -0.001945547682177703, -0.012264060135783059, -0.01918123484883027, -0.02085204854213218, -0.017398311804620432, -0.010843047725083214, -0.004218792703871864, -0.00024526809178707033, -0.00018006940738520043, -0.0033753175040451386, -0.007731643700643674, -0.010808384107922701, -0.011027508332232042, -0.008381216322701356, -0.0043182762695628575, -0.0009061268607439203, 0.00027020131180937793, -0.0011011071604229855, -0.003973398244345677, -0.006576335203847307, -0.0074013332297969405, -0.005997112221872879, -0.0031549403342048857, -0.00041354594685342506, 0.0008161114759088953, 0.00001909787537522473, -0.0021766855698935267, -0.004393816789994962, -0.00530451465420735, -0.004375804499880873, -0.0021370163325270535, 0.00016015425438361638, 0.001270025417289659, 0.0006549415396328343, -0.0012249337914117704, -0.0031968738964867236, -0.004073443445496454, -0.0033362889187471814, -0.0014066733664226398, 0.0006168612722488141, 0.0015933618877614084, 0.0010135295746297953, -0.0007117830531261618, -0.0025302051396371445, -0.0033486286781421915, -0.002662999917951366, -0.0008850598330510433, 0.0009721596160210275, 0.0018303387787859504, 0.0012280176257660727, -0.0004487482433564112, -0.0021818940154869726, -0.002932081624763673, -0.0022457230730293467, -0.0005197486171913921, 0.0012372099750579029, 0.002001898656848415, 0.0013409939255006572, -0.0003362679470962669, -0.002021791745017146, -0.002705571491975451, -0.0019713326900574852, -0.00024384498672773202, 0.0014625627385787636, 0.002144198846763754, 0.0014036734620138825, -0.00031346854044880085, -0.0019823202379916673, -0.002603555280730144, -0.0017958746952042278, -0.000026010191945940353, 0.001663848877334828, 0.0022726214142040216, 0.0014370857460397086, -0.0003496723967369197, -0.0020259983175674756, -0.00258682715374636, -0.0016833535012819114, 0.00016251640336814536, 0.0018625989232373447, 0.0024061750236276766, 0.0014611643815020242, -0.0004215613663481312, -0.002124635548792875, -0.002625658491743116, -0.0016103891248530591, 0.0003354676740744961, 0.002065109084345997, 0.002544327079610679, 0.0014730150835102819, -0.0005249288872486374, -0.002267444987482743, -0.0027076849170803055, -0.001561022200318086, 0.0005086821888281633, 0.002280245198512759, 0.002692184077529763, 0.0014761227884854836, -0.0006607464041652842, -0.002457239162305893, -0.0028280414659009197, -0.0015294515585555753, 0.0006915355847267412, 0.0025207593801799166, 0.002857180322156805, 0.0014727853741749518, -0.0008339395430257048, -0.0026976817675901537, -0.0029924223112642993, -0.0015111304954297353, 0.0008938099714909289, 0.0027997005555498848, 0.0030547061396237886, 0.0014717346593659142, -0.0010377595499237253, -0.0029884479212869456, -0.003198423147510916, -0.0015033410980779935, 0.0011232589952918858, 0.0031280658773844856, 0.0032948285965886683, 0.0014822751721795277, -0.001267247334237761, -0.003326618448683071, -0.0034435671157371883, -0.0015002410877480124, 0.0013883373476616578, 0.0035129015612919185, 0.003580461641451685, 0.0014997234770164842, -0.0015350647764644258, -0.003726468612340666, -0.0037361669131228455, -0.0015009668283882253, 0.0016973092316103352, 0.003964853328781898, 0.003913652429220177, 0.0015101779591682556, -0.0018665650453383203, -0.0042152777732563955, -0.004094194908561368, -0.0015026401493582798, 0.0020734088003995814, 0.0045124464027137155, 0.004311220426116113, 0.0015062808889516736, -0.0022965578835435737, -0.004840874581184737, -0.004553267335946033, -0.0015112053750866731, 0.002544221089291462, 0.005204614708693537, 0.004814070107962516, 0.0014986987570912028, -0.0028506107097492493, -0.00564780443371328, -0.005145263654093674, -0.0015174388950453808, 0.003168365471152377, 0.006124587170925147, 0.00549355386364513, 0.0015057795561448026, -0.0035721538662586696, -0.006715986860228709, -0.0059374341316555555, -0.0015282117294755221, 0.004010923632861681, 0.007379375384154067, 0.0064301122862342, 0.0015239977947573268, -0.004563463596928227, -0.008198605621877119, -0.007040671699814536, -0.0015277113070493902, 0.005235396231958957, 0.009206782632443134, 0.007800751846636829, 0.0015421289535953828, -0.00606173325872459, -0.010458288974794052, -0.0087431261297651, -0.0015361573110344328, 0.007149659825251556, 0.012101531655737083, 0.009984438540391749, 0.0015177143846137075, -0.008633150214759177, -0.014364779198983133, -0.011725534784952332, -0.0015218053114432154, 0.010713029003727333, 0.01761492132787253, 0.014283837115445844, 0.0015475125506288815, -0.01386116714634904, -0.022666384858941402, -0.018356726903836548, -0.00153915583801725, 0.019334566516062034, 0.0317804031377079, 0.026063504721384266, 0.0015362668696122176, -0.031042968662293332, -0.053021545392115454, -0.04608264444365938, -0.0015314176664841031, 0.07393881228213725, 0.15915873352237972, 0.22617925450442655, 0.2515550086860459, 0.22617925450442655, 0.15915873352237972, 0.07393881228213725, -0.0015314176664841031, -0.04608264444365938, -0.053021545392115454, -0.031042968662293332, 0.0015362668696122176, 0.026063504721384266, 0.0317804031377079, 0.019334566516062034, -0.00153915583801725, -0.018356726903836548, -0.022666384858941402, -0.01386116714634904, 0.0015475125506288815, 0.014283837115445844, 0.01761492132787253, 0.010713029003727333, -0.0015218053114432154, -0.011725534784952332, -0.014364779198983133, -0.008633150214759177, 0.0015177143846137075, 0.009984438540391749, 0.012101531655737083, 0.007149659825251556, -0.0015361573110344328, -0.0087431261297651, -0.010458288974794052, -0.00606173325872459, 0.0015421289535953828, 0.007800751846636829, 0.009206782632443134, 0.005235396231958957, -0.0015277113070493902, -0.007040671699814536, -0.008198605621877119, -0.004563463596928227, 0.0015239977947573268, 0.0064301122862342, 0.007379375384154067, 0.004010923632861681, -0.0015282117294755221, -0.0059374341316555555, -0.006715986860228709, -0.0035721538662586696, 0.0015057795561448026, 0.00549355386364513, 0.006124587170925147, 0.003168365471152377, -0.0015174388950453808, -0.005145263654093674, -0.00564780443371328, -0.0028506107097492493, 0.0014986987570912028, 0.004814070107962516, 0.005204614708693537, 0.002544221089291462, -0.0015112053750866731, -0.004553267335946033, -0.004840874581184737, -0.0022965578835435737, 0.0015062808889516736, 0.004311220426116113, 0.0045124464027137155, 0.0020734088003995814, -0.0015026401493582798, -0.004094194908561368, -0.0042152777732563955, -0.0018665650453383203, 0.0015101779591682556, 0.003913652429220177, 0.003964853328781898, 0.0016973092316103352, -0.0015009668283882253, -0.0037361669131228455, -0.003726468612340666, -0.0015350647764644258, 0.0014997234770164842, 0.003580461641451685, 0.0035129015612919185, 0.0013883373476616578, -0.0015002410877480124, -0.0034435671157371883, -0.003326618448683071, -0.001267247334237761, 0.0014822751721795277, 0.0032948285965886683, 0.0031280658773844856, 0.0011232589952918858, -0.0015033410980779935, -0.003198423147510916, -0.0029884479212869456, -0.0010377595499237253, 0.0014717346593659142, 0.0030547061396237886, 0.0027997005555498848, 0.0008938099714909289, -0.0015111304954297353, -0.0029924223112642993, -0.0026976817675901537, -0.0008339395430257048, 0.0014727853741749518, 0.002857180322156805, 0.0025207593801799166, 0.0006915355847267412, -0.0015294515585555753, -0.0028280414659009197, -0.002457239162305893, -0.0006607464041652842, 0.0014761227884854836, 0.002692184077529763, 0.002280245198512759, 0.0005086821888281633, -0.001561022200318086, -0.0027076849170803055, -0.002267444987482743, -0.0005249288872486374, 0.0014730150835102819, 0.002544327079610679, 0.002065109084345997, 0.0003354676740744961, -0.0016103891248530591, -0.002625658491743116, -0.002124635548792875, -0.0004215613663481312, 0.0014611643815020242, 0.0024061750236276766, 0.0018625989232373447, 0.00016251640336814536, -0.0016833535012819114, -0.00258682715374636, -0.0020259983175674756, -0.0003496723967369197, 0.0014370857460397086, 0.0022726214142040216, 0.001663848877334828, -0.000026010191945940353, -0.0017958746952042278, -0.002603555280730144, -0.0019823202379916673, -0.00031346854044880085, 0.0014036734620138825, 0.002144198846763754, 0.0014625627385787636, -0.00024384498672773202, -0.0019713326900574852, -0.002705571491975451, -0.002021791745017146, -0.0003362679470962669, 0.0013409939255006572, 0.002001898656848415, 0.0012372099750579029, -0.0005197486171913921, -0.0022457230730293467, -0.002932081624763673, -0.0021818940154869726, -0.0004487482433564112, 0.0012280176257660727, 0.0018303387787859504, 0.0009721596160210275, -0.0008850598330510433, -0.002662999917951366, -0.0033486286781421915, -0.0025302051396371445, -0.0007117830531261618, 0.0010135295746297953, 0.0015933618877614084, 0.0006168612722488141, -0.0014066733664226398, -0.0033362889187471814, -0.004073443445496454, -0.0031968738964867236, -0.0012249337914117704, 0.0006549415396328343, 0.001270025417289659, 0.00016015425438361638, -0.0021370163325270535, -0.004375804499880873, -0.00530451465420735, -0.004393816789994962, -0.0021766855698935267, 0.00001909787537522473, 0.0008161114759088953, -0.00041354594685342506, -0.0031549403342048857, -0.005997112221872879, -0.0074013332297969405, -0.006576335203847307, -0.003973398244345677, -0.0011011071604229855, 0.00027020131180937793, -0.0009061268607439203, -0.0043182762695628575, -0.008381216322701356, -0.011027508332232042, -0.010808384107922701, -0.007731643700643674, -0.0033753175040451386, -0.00018006940738520043, -0.00024526809178707033, -0.004218792703871864, -0.010843047725083214, -0.017398311804620432, -0.02085204854213218, -0.01918123484883027, -0.012264060135783059, -0.001945547682177703, 0.008724344055447954, 0.01671297155848559, 0.0201346660114865, 0.01881847728633389, 0.014133226977382235, 0.0105768366297881
    // };

    auto cpt = 0u;
    // This remove delay due to the convolution
    if constexpr (RemoveDelay) {
        // Highest part of the input
        for (auto i = 0u; i < inputSize - windowSize / 2 + 1; ++i) {
            const auto idx = inputSize - i - 1u;
            output[idx] = FilterImpl(input + idx - windowSize / 2, windowFilter.data(), windowSize, 0u);
            cpt++;
        }
        // Lower part of the input
        if constexpr (ProcessFirstChunk) {
            for (auto i = inputSize - windowSize + 1; i < inputSize - windowSize / 2; ++i) {
                const auto idx = inputSize - i - 1u;
                output[idx - windowSize / 2] = FilterImpl(input, windowFilter.data(), windowSize, windowSize - 1 - idx);
                cpt++;
            }
        }
    } else {
        // Hihest part of the input
        for (auto i = 0u; i < inputSize - windowSize + 1; ++i) {
            const auto idx = inputSize - i - 1u;
            // std::cout << "i: " << i << ", idx: " << idx << ", zeroPad: " << 0 << ", inOffset" << (idx - windowSize + 1) << std::endl;
            output[idx] = FilterImpl(input + idx - windowSize, windowFilter.data(), windowSize, 0u);
            cpt++;
        }
        // Lower part of the input
        if constexpr (ProcessFirstChunk) {
            for (auto i = inputSize - windowSize + 1; i < inputSize; ++i) {
                const auto idx = inputSize - i - 1u;
                output[idx] = FilterImpl(input, windowFilter.data(), windowSize, windowSize - 1 - idx);
                cpt++;
            }
        }
    }
    assert(cpt == inputSize);

    /** @brief Default version, maybe slower */
    // for (auto i = 0u; i < inputSize; ++i) {
    //     const auto idx = inputSize - i - 1u;
    //     const auto dt = (idx < windowSize ? windowSize - 1 - idx : 0u);
    //     const auto inputOffset = idx > windowSize - 1 ? idx - windowSize + 1 : 0;
    //     std::cout << i << ", " << idx << ", " << dt << ", " << inputOffset << std::endl;
    //     output[idx] = FilterImpl(input + inputOffset, coefs, windowSize, dt);
    // }

    // Normalize output
    std::for_each(output, output + inputSize, [](float &value) {
        // value /= std::sqrt(2.0) * 1;
    });
}
